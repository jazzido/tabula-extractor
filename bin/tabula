#!/usr/bin/env jruby
# encoding: utf-8
require 'trollop'
require_relative '../lib/tabula'

FORMATS = ['CSV', 'TSV', 'HTML', 'JSON']

def parse_pages_arg(pages_arg)
  ranges = pages_arg.split(',').map(&:strip)
  pages = []
  ranges.each do |range|
    s, e = range.split('-')
    return nil if (s.nil? && e.nil?) || s !~ /\d+/ || (!e.nil? && e !~ /\d+/)
    if e.nil?
      pages << s.to_i
    else
      return nil if s.to_i > e.to_i
      pages += (s.to_i..e.to_i).to_a
    end
  end
  pages.sort
end

def parse_command_line
  opts = Trollop::options do
    version "tabula #{Tabula::VERSION} (c) 2012-2013 Manuel Aristar√°n"
    banner <<-EOS
Tabula helps you extract tables from PDFs

Usage:
       tabula [options] <pdf_file>
where [options] are:
EOS

    opt :pages, 'Comma separated list of ranges. Examples: --pages 1-3,5-7 or --pages 3. Default is --pages 1', :default => '1', :type => String
    opt :area, 'Portion of the page to analyze (top,left,bottom,right). Example: --area 269.875,12.75,790.5,561. Default is entire page', :type => String, :default => nil
    opt :columns, 'X coordinates of column boundaries. Example --columns 10.1,20.2,30.3', :default => nil, :type => String
    opt :password, 'Password to decrypt document. Default is empty', :default => ''
    opt :guess, 'Guess the portion of the page to analyze per page. Slow.'
    opt :debug, 'Print detected table areas instead of processing.'
    opt :format, "Output format (#{FORMATS.join(",")})", :default => 'CSV'
    opt :outfile, 'Write output to <file> instead of STDOUT', :default => '-'
    opt :spreadsheet, "Force PDF to be extracted using spreadsheet-style extraction (if there are ruling lines separating each cell, as in a PDF of an Excel spreadsheet)"
    opt :no_spreadsheet, "Force PDF not to be extracted using spreadsheet-style extraction (if there are ruling lines separating each cell, as in a PDF of an Excel spreadsheet)"
  end

  if !opts[:columns].nil?
    c = opts[:columns].split(',')
    Trollop::die :columns, "is invalid" unless c.all? { |x| x.strip =~  /(\d+\.?\d*)/ }
  end

  if !opts[:area].nil?
    unless opts[:area].split(',').size == 4 \
      && opts[:area].split(',').all? { |x| x.strip =~ /(\d+\.?\d*)/ }
      Trollop::die :area, "is invalid"
    end
  end
  Trollop::die :format, "is unknown" unless FORMATS.include?(opts[:format])
  Trollop::die "need one filename" if ARGV.empty?

  pdf_filename = ARGV.shift
  Trollop::die 'file does not exist' unless File.exists? pdf_filename

  return opts, pdf_filename
end

def rulings_from_columns(page, area, vertical_rulings)
  area = [page.top, page.left, page.bottom, page.right ] if area.nil?
  vertical_rulings.map { |vr|
    Tabula::Ruling.new(area[0], vr, 0, page.height)
  }
end

def heuristic_to_decide_whether_to_use_spreadsheet_extraction
  false #TODO
end

def main
  opts, filename = parse_command_line

  area = opts[:area].nil? ? nil : opts[:area].split(',').map(&:to_f)
  vertical_rulings = opts[:columns].nil? ? nil : opts[:columns].split(',').map(&:to_f)
  out = opts[:outfile] == '-' ? $stdout : File.new(opts[:outfile], 'wb')

  use_spreadsheet_extraction =  if opts[:spreadsheet]
                                  true
                                elsif opts[:no_spreadsheet]
                                  false
                                else
                                  heuristic_to_decide_whether_to_use_spreadsheet_extraction
                                end

  if use_spreadsheet_extraction #TODO: use a heuristic, but allow forcing.
    extractor = Tabula::Extraction::ObjectExtractor.new(filename, parse_pages_arg(opts[:pages]), opts[:password])
    extractor.extract.each do |pdf_page|
      pdf_page.spreadsheets.each do |spreadsheet|
        if opts[:debug]
          puts "Page #{pdf_page}: #{spreadsheet.dims(:top, :left, :bottom, :right)}"
        else
          Tabula::Writers.send(opts[:format].to_sym,
                              spreadsheet.rows, #rows filled in automatically
                              out)
        end
      end
    end
  else
    extractor = Tabula::Extraction::ObjectExtractor.new(filename, parse_pages_arg(opts[:pages]), opts[:password])
    extractor.extract.each_with_index do |page, page_index|
      if opts[:guess]
        page_areas = page.spreadsheets.map{|rect| rect.dims(:top, :left, :bottom, :right)}
      elsif area
        page_areas = [area]
      end

      if page_areas
        page_areas.each do |page_area|
          if opts[:guess] && opts[:debug]
            puts (page_index + 1).to_s + ', ' + page_area.to_s
          else
            table = page.get_area(page_area).make_table(vertical_rulings.nil? ? {} : {:vertical_rulings => rulings_from_columns(page, area, vertical_rulings)})
            Tabula::Writers.send(opts[:format].to_sym,
                                 table,
                                 out)
          end

        end

      else
        table = page.make_table(vertical_rulings.nil? ? {} : {:vertical_rulings => rulings_from_columns(page, area, vertical_rulings)})
        Tabula::Writers.send(opts[:format].to_sym,
                             table,
                             out)
      end
    end
  end
  out.close
end

main
